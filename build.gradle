buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.5'
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.3"
    }
}

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: "com.gradle.plugin-publish"


group = 'com.comsysto.gradle'
version = new Version('0.3.0-SNAPSHOT')
status = version.status

repositories {
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
    compile 'me.champeau.gradle:jmh-gradle-plugin:0.2.0'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

pluginBundle {
    website = 'https://github.com/comsysto/crolabefra-java'
    vcsUrl = 'https://github.com/comsysto/crolabefra-java'
    description = 'CroLaBeFra Gradle Plugin for Java with Jmh'
    tags = ['crolabefra', 'jmh', 'java', 'microbenchmarks']

    plugins {
        crolabefraJavaPlugin {
            id = 'com.comsysto.gradle.crolabefra.java'
            displayName = 'CroLaBeFra Gradle Plugin for Java with Jmh'
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'crolabefra-java-plugin'
            from components.java

            artifact sourcesJar {
                classifier "sources"
            }

            pom.withXml {
                def Node pomRoot = asNode()
                pomRoot.appendNode('name', 'CroLaBeFra Gradle Plugin for Java')
                pomRoot.appendNode('url', 'https://github.com/comsysto/crolabefra-java')

                def issues = pomRoot.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', 'https://github.com/comsysto/crolabefra-java/issues')

                def scm = pomRoot.appendNode('scm')
                scm.appendNode('url', 'https://github.com/comsysto/crolabefra-java')
                scm.appendNode('connection', 'scm:git:https://github.com/comsysto/crolabefra-java.git')
                scm.appendNode('developerConnection', 'scm:git:git@github.com:comsysto/crolabefra-java.git')

                def license = pomRoot.appendNode('licenses').appendNode('license');
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                def developer = pomRoot.appendNode('developers').appendNode('developer');
                developer.appendNode('id', 'bensteinert')
                developer.appendNode('name', 'Benjamin Steinert')
                developer.appendNode('organization', 'comSysto')
                developer.appendNode('organizationUrl', 'http://comsysto.com')
            }
        }
    }
}

bintray {
    user = System.getProperty('bintrayUsername')
    key = System.getProperty('bintrayKey')
    //dryRun = true
    publish = true

    publications = ['mavenJava']
    pkg {
        userOrg = 'comsysto'
        repo = 'crolabefra'
        name = 'crolabefra-java-plugin'
        desc = 'CroLaBeFra Gradle Plugin for Java micro benchmarks with JMH'
        licenses = ['Apache-2.0']
        labels = ['jmh', 'gradle', 'crolabefra']
        websiteUrl = 'https://github.com/comsysto/crolabefra-java'
        issueTrackerUrl = 'https://github.com/comsysto/crolabefra-java/issues'
        vcsUrl = 'https://github.com/comsysto/crolabefra-java'
        version {
            vcsTag = "${project.version}"
            released  = new Date()
            desc = 'Initial release'
            attributes = ['gradle-plugin': 'com.comsysto.gradle.crolabefra.java:com.comsysto.gradle:crolabefra-java-plugin']
        }
    }
}


// Taken from https://github.com/bintray/bintray-examples/blob/master/gradle-multi-example/build.gradle

import java.text.SimpleDateFormat
class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}


